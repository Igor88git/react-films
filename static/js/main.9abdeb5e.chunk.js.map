{"version":3,"sources":["headerFooter/Header.jsx","headerFooter/Footer.jsx","components/Film.jsx","components/FilmList.jsx","components/Search.jsx","components/Preloader.jsx","headerFooter/Main.jsx","App.js","index.js"],"names":["Header","className","href","id","Footer","Date","getFullYear","Film","props","title","Title","year","Year","imdbID","type","Type","poster","Poster","src","FilmList","movies","length","map","movie","Search","state","search","handleKey","event","key","searchFilm","handleFilter","setState","target","dataset","placeholder","value","this","onChange","onKeyDown","onClick","name","checked","React","Component","Preloader","Main","loading","str","fetch","then","response","json","data","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9abdeb5e.chunk.js","sourcesContent":["function Header() {\r\n    // https://materializecss.com/navbar.html\r\n    return <nav className='red darken-4'>\r\n    <div className=\"nav-wrapper\">\r\n      <a href=\"!#\" className=\"brand-logo\">React Films</a>\r\n      <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n        <li><a href=\"!#\">Repo</a></li> {/* ссылку добавлю на репозиторий */}\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n}\r\n\r\nexport {Header}","function Footer() {\r\n    return <footer className=\"page-footer  blue-grey darken-4\">\r\n          \r\n          <div className=\"footer-copyright\">\r\n            <div className=\"container\">\r\n            © {new Date().getFullYear()} Copyright Text\r\n            <a className=\"grey-text text-lighten-4 right\" href=\"#!\">Repo</a>\r\n            </div>\r\n          </div>\r\n\r\n        </footer>\r\n}\r\n\r\nexport {Footer}\r\n\r\n\r\n","function Film(props) {\r\n    // ожидает массив данных (props) поэтому деструктурируем\r\n    const {\r\n        Title: title, \r\n        Year: year,\r\n        imdbID: id,\r\n        Type: type,\r\n        Poster: poster\r\n    } = props;\r\n\r\n    // https://materializecss.com/cards.html\r\n    // динамичесски получаем картинку через poster\r\n    // Деструктурировали props, и ниже все использовали \r\n    return <div id={id} className=\"card film\">\r\n    <div className=\"card-image waves-effect waves-block waves-light\">\r\n\r\n      {/* проверка есть ли постер, если нет то не показывать */}\r\n      {\r\n        poster === 'N/A' ? \r\n        <img className=\"activator\" src={`https://via.placeholder.com/300x400?text=${title}`} />\r\n        :\r\n        <img className=\"activator\" src={poster} />\r\n      }\r\n\r\n    </div>\r\n    <div className=\"card-content\">\r\n      <span className=\"card-title activator grey-text text-darken-4\">{title}</span>\r\n      <p>{year} <span className='right'>{type}</span></p>\r\n    </div>\r\n    \r\n  </div>\r\n}\r\n\r\nexport {Film}","import {Film} from './Film'\r\n\r\nfunction FilmList(props) {\r\n    const{ movies = [] } = props; // если ничего не найдено, придет пустой массив по умолчанию\r\n\r\n    //проходит по всем фильмам что есть и через map для каждого фильма делает разметку, можно сделать спред опрератор\r\n    return <div className='movies'>\r\n        {movies.length ? movies.map(movie => (\r\n            <Film key={movie.imdbID} \r\n            Poster={movie.Poster} \r\n            Title={movie.Title} \r\n            Type={movie.Type} \r\n            Year={movie.Year} />\r\n        )) : <h6>Ошибка, ничего не найдено.</h6>\r\n    }\r\n    </div>\r\n}\r\n\r\nexport {FilmList}","import React from 'react'\r\n\r\nclass Search extends React.Component {\r\n\r\n    state = {\r\n        search: '', \r\n        type: 'all', // radio\r\n    }\r\n\r\n    handleKey = (event) => {\r\n        if (event.key === 'Enter') {\r\n            this.props.searchFilm(this.state.search, this.state.type); // при нажатии энтер вызываем этот метод и передаем ему текущий стейт\r\n        }\r\n    }\r\n\r\n    handleFilter = (event) => {\r\n        this.setState(() => ({ type: event.target.dataset.type }), () => {\r\n            this.props.searchFilm(this.state.search, this.state.type);\r\n        });\r\n\r\n    }\r\n\r\n//  https://materializecss.com/text-inputs.html\r\n    render() {\r\n      return <div className=\"row\">\r\n          <div className=\"input-field\">\r\n            <input \r\n                className=\"validate\" \r\n                placeholder='Поиск - english letters only' \r\n                type=\"search\" \r\n                value={this.state.search}\r\n                onChange={(event) => this.setState({search: event.target.value})}  // обновлять стейт\r\n                onKeyDown={this.handleKey}\r\n            />\r\n            <button className='btn search-btn' onClick={ () => this.props.searchFilm(this.state.search, this.state.type) }>Поиск</button>\r\n          </div>\r\n        <div>\r\n          \r\n            <label>\r\n                <input \r\n                    className=\"with-gap\" \r\n                    name=\"group3\" \r\n                    type=\"radio\" \r\n                    data-type='all' \r\n                    onChange={this.handleFilter} \r\n                    checked={this.state.type === 'all'}\r\n                />\r\n            <span>All</span>\r\n            </label>\r\n\r\n            <label>\r\n                <input \r\n                    className=\"with-gap\" \r\n                    name=\"group3\" \r\n                    type=\"radio\" \r\n                    data-type='movie' \r\n                    onChange={this.handleFilter} \r\n                    checked={this.state.type === 'movie'}\r\n                />\r\n            <span>Films only</span>\r\n            </label>\r\n\r\n            <label>\r\n                <input \r\n                    className=\"with-gap\" \r\n                    name=\"group3\" \r\n                    type=\"radio\" \r\n                    data-type='series' \r\n                    onChange={this.handleFilter} \r\n                    checked={this.state.type === 'series'}\r\n                />\r\n            <span>Series only</span>\r\n            </label>\r\n          \r\n        </div>\r\n\r\n      </div>\r\n    }\r\n}\r\n\r\nexport {Search}","function Preloader() {\r\n    return <div className=\"progress\">\r\n            <div className=\"indeterminate\"></div>\r\n        </div>\r\n}\r\n\r\nexport {Preloader}","import React from 'react'\r\nimport {FilmList} from '../components/FilmList'\r\nimport {Search} from '../components/Search'\r\nimport {Preloader} from '../components/Preloader'\r\n\r\nclass Main extends React.Component {\r\n    state = {\r\n        movies: [],\r\n        loading: true,\r\n    }\r\n\r\n    // метод жизненного цикла компонент смонтировался, внутри которого мы будем делать запрос наших данных\r\n    componentDidMount() {\r\n        fetch(`http://www.omdbapi.com/?apikey=e490bdaa&s=spider`)\r\n    \r\n    // ответ придет response который нужно преобразовать через метод json()\r\n        .then(response => response.json())\r\n\r\n    // потом придут нужные данные, при их получении обращаемся к setState говорим что в наши фильмы нужно положить то что лежит в data в его ключе Search\r\n        .then(data => this.setState({movies: data.Search, loading: false})) // каждый раз когда данные загружены - loading: false\r\n    }\r\n    \r\n    // если будет не 'all' а movie или series у нас появится дополнительный гет-параметр `&type=${type}`\r\n    searchFilm = (str, type='all') => {\r\n        this.setState({ loading: true })\r\n        fetch(`http://www.omdbapi.com/?apikey=e490bdaa&s=${str}${type !== 'all' ? `&type=${type}` : ''}`)\r\n        .then(response => response.json())\r\n        .then(data => this.setState({movies: data.Search, loading: false})) // каждый раз когда данные загружены - loading: false\r\n    }\r\n\r\n    render() {\r\n        const {movies, loading} = this.state; // деструктуризация для прелоадера,\r\n\r\n        return <main className='container content'>\r\n            <Search searchFilm={this.searchFilm} />\r\n            \r\n            {\r\n                loading ? (  \r\n                // Если идет загрузка, мы загружаем прелоадер\r\n                <Preloader /> \r\n                ) : (\r\n                // если не идет загрузка то загружаем фильмы\r\n                <FilmList movies={movies} />\r\n                ) \r\n            }\r\n            \r\n        </main>\r\n    }\r\n}\r\n\r\nexport{Main}","import {Header} from './headerFooter/Header'\nimport {Footer} from './headerFooter/Footer'\nimport {Main} from './headerFooter/Main'\n\nfunction App() {\n  return (\n    <>  {/* <></> позволяет добавить несколько элементов */}\n      <Header />\n      <Main />\n      <Footer />\n\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}